import os 
import json
from datetime import datetime
from kucoin_api import fetch_coin_data  # üÜï Gi·∫£ ƒë·ªãnh b·∫°n c√≥ file kucoin_api.py x·ª≠ l√Ω d·ªØ li·ªáu
from openai import OpenAI

from openai import OpenAI

client = OpenAI(api_key=os.getenv("GPT_API"))

def get_market_data():
    symbols = [
        "BTC/USDT", "ETH/USDT", "SOL/USDT", "BNB/USDT", "LINK/USDT",
        "NEAR/USDT", "AVAX/USDT", "ARB/USDT", "SUI/USDT", "PENDLE/USDT"
    ]
    coin_data = []

    for symbol in symbols:
        try:
            data = fetch_coin_data(symbol)
            coin_data.append({"symbol": symbol, "data": data})
        except Exception as e:
            print(f"‚ùå L·ªói khi fetch {symbol}: {e}")

    context = "Ph√¢n t√≠ch k·ªπ thu·∫≠t t·ªïng th·ªÉ d·ª±a tr√™n BTC/USDT ho·∫∑c market cap... (placeholder)"

    return {
        "context": context,
        "coins": coin_data
    }

def build_signals():
    try:
        market_data = get_market_data()
        context = market_data["context"]
        coin_data = market_data["coins"]
        all_symbols = [coin["symbol"] for coin in coin_data]
        raw_signals = coin_data

        print("üìò B·ªëi c·∫£nh th·ªã tr∆∞·ªùng:")
        print(context)
        print("üìà D·ªØ li·ªáu c√°c coin:")
        for coin in coin_data:
            print(f"- {coin['symbol']}: {coin['data']}")

        timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M")
        debug_filename = f"debug_input_{timestamp}.json"
        with open(debug_filename, "w") as f:
            json.dump({"context": context, "coins": coin_data}, f, indent=2)

        prompt = f'''
B·∫°n l√† m·ªôt chuy√™n gia giao d·ªãch crypto. H√£y ph√¢n t√≠ch v√† ch·ªçn ra c√°c t√≠n hi·ªáu m·∫°nh t·ª´ d·ªØ li·ªáu sau:

B·ªëi c·∫£nh th·ªã tr∆∞·ªùng chung:
{context}

D·ªØ li·ªáu c√°c ƒë·ªìng coin:
{coin_data}

Y√™u c·∫ßu:
- Ch·ªâ ch·ªçn t√≠n hi·ªáu ƒë·ªß m·∫°nh (v√≠ d·ª•: breakout r√µ r√†ng ƒë·ªÉ v√†o l·ªánh Long ho·∫∑c breakdown m·∫°nh ƒë·ªÉ v√†o l·ªánh Short, volume v∆∞·ª£t ƒë·ªânh, RSI qu√° mua/qu√° b√°n r√µ).
- T∆∞ v·∫•n ƒë√≤n b·∫©y (leverage) ph√π h·ª£p v·ªõi m·ª©c ƒë·ªô r·ªßi ro c·ªßa t√≠n hi·ªáu (v√≠ d·ª•: x3 cho t√≠n hi·ªáu c√≥ r·ªßi ro cao, x10 cho t√≠n hi·ªáu an to√†n v√† r√µ r√†ng).
- Ch·ªâ ph√°t t·ªëi ƒëa 1 t√≠n hi·ªáu cho m·ªói ƒë·ªìng coin.
- Tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON g·ªìm: pair, direction, entry_1, entry_2, stop_loss, tp [5 m·ª•c ti√™u], risk_level, leverage, key_watch, assessment.
- N·∫øu kh√¥ng c√≥ t√≠n hi·ªáu m·∫°nh, tr·∫£ v·ªÅ null.

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
'''

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )

        result = response.choices[0].message.content
        print("üì§ GPT Output:")
        print(result)

        if "null" in result.lower():
            return [], all_symbols, raw_signals

        parsed = json.loads(result)
        return parsed, all_symbols, raw_signals

    except Exception as e:
        print(f"‚ùå GPT error: {e}")
        return [], [], []
