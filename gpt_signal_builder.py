import os
import openai
from datetime import datetime, UTC
from utils import parse_signal_response

# G·ª≠i t·ª´ng coin m·ªôt v·ªõi prompt c√≥ ƒë·ªãnh d·∫°ng t·ª´ PROMPT_TEMPLATE
async def get_gpt_signals(data_by_symbol):
    results = {}

    openai.api_key = os.getenv("OPENAI_API_KEY")
    client = openai.AsyncOpenAI()  # ‚úÖ SDK m·ªõi

    for symbol, tf_data in data_by_symbol.items():
        try:
            summary_lines = []
            for tf in ["1H", "4H", "1D"]:
                item = tf_data.get(tf, {})
                if item:
                    summary_lines.append(
                        f"[{tf}] Trend: {item.get('trend')}, RSI: {item.get('rsi')}, MA20: {item.get('ma20')}, MA50: {item.get('ma50')}, Candle: {item.get('candle_signal')}, BB: ({item.get('bb_lower')}, {item.get('bb_upper')})"
                    )

            prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω giao d·ªãch crypto chuy√™n nghi·ªáp.
D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu k·ªπ thu·∫≠t c·ªßa {symbol} theo t·ª´ng khung th·ªùi gian:

{chr(10).join(summary_lines)}

D·ª±a tr√™n xu h∆∞·ªõng, l·ª±c n·∫øn, RSI, MA, v√† v√πng BB, h√£y ƒë√°nh gi√° xem c√≥ c∆° h·ªôi giao d·ªãch kh√¥ng.
N·∫øu c√≥, h√£y ƒë·ªÅ xu·∫•t k·∫ø ho·∫°ch giao d·ªãch chi ti·∫øt nh∆∞ sau:
- Direction: Long ho·∫∑c Short
- Entry 1:
- Entry 2:
- Stop Loss:
- TP1 ƒë·∫øn TP5:
- Risk Level:
- Leverage:
- Key watch:
- Nh·∫≠n ƒë·ªãnh ng·∫Øn g·ªçn v·ªÅ t√≠n hi·ªáu n√†y b·∫±ng ti·∫øng Vi·ªát.

Ch·ªâ tr·∫£ v·ªÅ d·ªØ li·ªáu JSON.
"""

            now = datetime.now(UTC)
            print(f"\nü§ñ GPT analyzing {symbol} at {now.isoformat()}...")

            response = await client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "user", "content": prompt.strip()}
                ],
                temperature=0.4,
                max_tokens=1000,
                timeout=30
            )

            reply = response.choices[0].message.content
            parsed = parse_signal_response(reply)

            if parsed:
                results[symbol] = parsed
            else:
                print(f"‚ö†Ô∏è GPT tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá cho {symbol}.\n{reply}")

        except Exception as e:
            print(f"‚ùå GPT failed for {symbol}: {e}")

    return results

BLOCKS = {
    "block1": ["BTC/USDT", "ETH/USDT", "SOL/USDT", "BNB/USDT"],
    "block2": ["LINK/USDT", "NEAR/USDT", "AVAX/USDT", "ARB/USDT"],
    "block3": ["SUI/USDT", "PENDLE/USDT"]
}
