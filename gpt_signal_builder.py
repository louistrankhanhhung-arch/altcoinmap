import os
import openai
from datetime import datetime, UTC
import json
from utils import parse_signal_response

# G·ª≠i t·ª´ng coin m·ªôt v·ªõi prompt c√≥ ƒë·ªãnh d·∫°ng t·ª´ PROMPT_TEMPLATE
async def get_gpt_signals(data_by_symbol, suggested_tps_by_symbol, test_mode=False):
    results = {}

    openai.api_key = os.getenv("OPENAI_API_KEY")

    async with openai.AsyncOpenAI() as client:
        for symbol, tf_data in data_by_symbol.items():
            try:
                if not test_mode:
                    current_time = datetime.now(UTC)
                    if current_time.hour % 4 != 0:
                        print(f"‚è≥ B·ªè qua {symbol} v√¨ n·∫øn 4H ch∆∞a ƒë√≥ng.")
                        continue
                else:
                    print(f"üß™ [TEST MODE] Lu√¥n x·ª≠ l√Ω {symbol} b·∫•t k·ªÉ gi·ªù.")

                summary_lines = []
                for tf in ["1H", "4H", "1D"]:
                    item = tf_data.get(tf, {})
                    if item:
                        summary_lines.append(
                            f"[{tf}] Trend: {item.get('trend')}, RSI: {item.get('rsi')}, MA20: {item.get('ma20')}, MA50: {item.get('ma50')}, Candle: {item.get('candle_signal')}, BB: ({item.get('bb_lower')}, {item.get('bb_upper')})"
                        )

                current_price = tf_data.get("4H", {}).get("close", "N/A")
                trend_1h = tf_data.get("1H", {}).get("trend", "unknown")
                trend_4h = tf_data.get("4H", {}).get("trend", "unknown")
                trend_1d = tf_data.get("1D", {}).get("trend", "unknown")
                rsi_4h = tf_data.get("4H", {}).get("rsi")
                bb_width_4h = tf_data.get("4H", {}).get("bb_upper", 0) - tf_data.get("4H", {}).get("bb_lower", 0)
                suggested_tps = suggested_tps_by_symbol.get(symbol, [])

                json_tps = json.dumps(suggested_tps, ensure_ascii=False)

                prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω giao d·ªãch crypto chuy√™n nghi·ªáp.
D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu k·ªπ thu·∫≠t c·ªßa {symbol} theo t·ª´ng khung th·ªùi gian:

{chr(10).join(summary_lines)}

Gi√° hi·ªán t·∫°i: {current_price}
C√°c v√πng Take Profit g·ª£i √Ω theo k·ªπ thu·∫≠t: {json_tps}

Xu h∆∞·ªõng 1H: {trend_1h}, xu h∆∞·ªõng 4H: {trend_4h}, xu h∆∞·ªõng 1D: {trend_1d}, RSI 4H: {rsi_4h}

H√£y ƒë√°nh gi√° xem c√≥ c∆° h·ªôi giao d·ªãch kh√¥ng d·ª±a tr√™n s·ª± ƒë·ªìng thu·∫≠n gi·ªØa c√°c khung th·ªùi gian, RSI, Bollinger Bands v√† l·ª±c n·∫øn.

- N·∫øu kh√¥ng r√µ xu h∆∞·ªõng ho·∫∑c khung 4H ch∆∞a th·ª±c s·ª± break, KH√îNG ƒë·ªÅ xu·∫•t giao d·ªãch.
- N·∫øu c√≥ t√≠n hi·ªáu, h√£y ph√¢n lo·∫°i: "trend-follow", "technical bounce", "trap setup" ho·∫∑c "breakout anticipation".

Ch·ªâ TR·∫¢ V·ªÄ n·ªôi dung JSON THU·∫¶N T√öY, KH√îNG bao g·ªìm ```json, ``` ho·∫∑c b·∫•t k·ª≥ ch√∫ th√≠ch, vƒÉn b·∫£n m√¥ t·∫£ n√†o b√™n ngo√†i JSON. ƒê·ªãnh d·∫°ng b·∫Øt bu·ªôc:
{{
  "symbol": "BTC/USDT",
  "direction": "Long ho·∫∑c Short",
  "entry_1": 12345.67,
  "entry_2": 12200.0,
  "stop_loss": 11950.0,
  "tp": [12450.0, 12600.0, 12800.0],
  "risk_level": "Low / Medium / High",
  "leverage": "3x / 5x / 10x",
  "confidence": "high / medium / low",
  "strategy_type": "trend-follow / technical bounce / trap setup / breakout anticipation",
  "key_watch": "Kh√°ng c·ª± g·∫ßn 12500, ch·ªù x√°c nh·∫≠n breakout",
  "nhan_dinh": "T√≠n hi·ªáu Long theo xu h∆∞·ªõng, l·ª±c n·∫øn m·∫°nh, n√™n ch·ªù retest entry"
}}

‚ö†Ô∏è L∆∞u √Ω k·ªπ:
- Ch·ªâ tr·∫£ v·ªÅ JSON ƒë√∫ng chu·∫©n nh∆∞ tr√™n, KH√îNG th√™m b·∫•t k·ª≥ k√Ω t·ª± l·∫°, m√¥ t·∫£ hay ƒë·ªãnh d·∫°ng markdown n√†o.
- C√°c tr∆∞·ªùng `entry_1`, `entry_2`, `stop_loss`, `tp` PH·∫¢I l√† s·ªë (float), KH√îNG ƒë·ªÉ trong ngo·∫∑c k√©p.
- `tp` ph·∫£i l√† m·ªôt danh s√°ch c√°c s·ªë (m·∫£ng s·ªë th·ª±c).
- Kh√¥ng ƒë∆∞·ª£c thi·∫øu b·∫•t k·ª≥ tr∆∞·ªùng n√†o trong JSON tr√™n.
"""

                now = datetime.now(UTC)
                print(f"\nü§ñ GPT analyzing {symbol} at {now.isoformat()}...")

                response = await client.chat.completions.create(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": prompt.strip()}],
                    temperature=0.4,
                    max_tokens=1200,
                    timeout=30
                )

                reply = response.choices[0].message.content.strip()
                print(f"üì© GPT raw reply for {symbol}:", reply)

                # Strip leading/trailing non-json characters for safety
                json_start = reply.find('{')
                json_end = reply.rfind('}') + 1
                cleaned = reply[json_start:json_end].strip()

                parsed = parse_signal_response(cleaned)

                if not parsed:
                    print(f"‚ö†Ô∏è GPT tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá cho {symbol}.")
                    continue

                parsed["pair"] = symbol

                results[symbol] = parsed

            except Exception as e:
                print(f"‚ùå GPT failed for {symbol}: {e}")

    return results

BLOCKS = {
    "block1": ["BTC/USDT", "ETH/USDT", "SOL/USDT", "BNB/USDT"],
    "block2": ["LINK/USDT", "NEAR/USDT", "AVAX/USDT", "ARB/USDT"],
    "block3": ["SUI/USDT", "PENDLE/USDT"]
}
