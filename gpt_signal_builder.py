import os
import openai
from datetime import datetime, UTC
import json
from utils import parse_signal_response

# G·ª≠i t·ª´ng coin m·ªôt v·ªõi prompt c√≥ ƒë·ªãnh d·∫°ng t·ª´ PROMPT_TEMPLATE
async def get_gpt_signals(data_by_symbol, suggested_tps_by_symbol):
    results = {}

    openai.api_key = os.getenv("OPENAI_API_KEY")

    async with openai.AsyncOpenAI() as client:
        for symbol, tf_data in data_by_symbol.items():
            try:
                summary_lines = []
                for tf in ["1H", "4H", "1D"]:
                    item = tf_data.get(tf, {})
                    if item:
                        summary_lines.append(
                            f"[{tf}] Trend: {item.get('trend')}, RSI: {item.get('rsi')}, MA20: {item.get('ma20')}, MA50: {item.get('ma50')}, Candle: {item.get('candle_signal')}, BB: ({item.get('bb_lower')}, {item.get('bb_upper')})"
                        )

                current_price = tf_data.get("4H", {}).get("close", "N/A")
                trend_4h = tf_data.get("4H", {}).get("trend", "unknown")
                trend_1d = tf_data.get("1D", {}).get("trend", "unknown")
                suggested_tps = suggested_tps_by_symbol.get(symbol, [])

                json_tps = json.dumps(suggested_tps, ensure_ascii=False)

                prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω giao d·ªãch crypto chuy√™n nghi·ªáp.
D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu k·ªπ thu·∫≠t c·ªßa {symbol} theo t·ª´ng khung th·ªùi gian:

{chr(10).join(summary_lines)}

Gi√° hi·ªán t·∫°i: {current_price}
C√°c v√πng Take Profit g·ª£i √Ω theo k·ªπ thu·∫≠t: {json_tps}
Xu h∆∞·ªõng 4H: {trend_4h}, xu h∆∞·ªõng 1D: {trend_1d}

H√£y ƒë√°nh gi√° xem c√≥ c∆° h·ªôi giao d·ªãch kh√¥ng d·ª±a tr√™n xu h∆∞·ªõng (Trend), l·ª±c n·∫øn, RSI, MA, Bollinger Bands. 
C√°c m·ª©c Entry, Stop Loss v√† Take Profit c·∫ßn ƒë∆∞·ª£c x√°c ƒë·ªãnh d·ª±a tr√™n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t nh∆∞ h·ªó tr·ª£/kh√°ng c·ª±, Bollinger Bands, MA v√† ATR. Tr√°nh ƒë·∫∑t Entry qu√° xa gi√° hi·ªán t·∫°i. Stop Loss kh√¥ng n√™n qu√° g·∫ßn. TP n√™n th·ª±c t·∫ø v√† c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c trong b·ªëi c·∫£nh th·ªã tr∆∞·ªùng. T·ª∑ l·ªá R:R n√™n h·ª£p l√Ω, v√≠ d·ª• 1:1.5 tr·ªü l√™n.
N·∫øu c√≥, h√£y ƒë·ªÅ xu·∫•t k·∫ø ho·∫°ch giao d·ªãch chi ti·∫øt nh∆∞ sau, ∆∞u ti√™n ƒë√∫ng k·ªπ thu·∫≠t v√† th·ª±c t·∫ø th·ªã tr∆∞·ªùng:

Ch·ªâ TR·∫¢ V·ªÄ n·ªôi dung JSON THU·∫¶N T√öY ƒë√∫ng ƒë·ªãnh d·∫°ng sau, KH√îNG th√™m ```json ho·∫∑c b·∫•t k·ª≥ m√¥ t·∫£, k√Ω t·ª± n√†o kh√°c:
"""
                prompt += """
{
  "symbol": "...",
  "direction": "Long ho·∫∑c Short",
  "entry1": ..., 
  "entry2": ...,  
  "stop_loss": ..., 
  "take_profits": [...],
  "risk_level": "Low / Medium / High",
  "leverage": "3x / 5x",
  "confidence": "high / medium / low",
  "key_watch": "...",
  "nhan_dinh": "..."
}
"""

                now = datetime.now(UTC)
                print(f"\nü§ñ GPT analyzing {symbol} at {now.isoformat()}...")

                response = await client.chat.completions.create(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": prompt.strip()}],
                    temperature=0.4,
                    max_tokens=1200,
                    timeout=30
                )

                reply = response.choices[0].message.content.strip()
                print(f"üì© GPT raw reply for {symbol}:", reply)

                # Strip leading/trailing non-json characters for safety
                json_start = reply.find('{')
                json_end = reply.rfind('}') + 1
                cleaned = reply[json_start:json_end].strip()

                parsed = parse_signal_response(cleaned)

                if not parsed:
                    print(f"‚ö†Ô∏è GPT tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá cho {symbol}.")
                    continue

                parsed["pair"] = symbol

                # L·∫•y c√°c th√¥ng s·ªë k·ªπ thu·∫≠t ƒë·ªÉ t·ª± ƒë·ªông t√≠nh SL n·∫øu c·∫ßn
                direction = parsed.get("direction")
                tf_4h = tf_data.get("4H", {})
                entry_1 = parsed.get("entry_1")
                bb_lower = tf_4h.get("bb_lower")
                bb_upper = tf_4h.get("bb_upper")
                swing_low = tf_4h.get("low")
                swing_high = tf_4h.get("high")
                atr_val = tf_4h.get("atr")
                ma20 = tf_4h.get("ma20")
                rsi = tf_4h.get("rsi")
                sr_levels = tf_4h.get("sr_levels")

                results[symbol] = parsed

            except Exception as e:
                print(f"‚ùå GPT failed for {symbol}: {e}")

    return results

BLOCKS = {
    "block1": ["BTC/USDT", "ETH/USDT", "SOL/USDT", "BNB/USDT"],
    "block2": ["LINK/USDT", "NEAR/USDT", "AVAX/USDT", "ARB/USDT"],
    "block3": ["SUI/USDT", "PENDLE/USDT"]
}
