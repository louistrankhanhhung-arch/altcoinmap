import os  
import json
import re
from datetime import datetime
from kucoin_api import fetch_coin_data, fetch_realtime_price
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def get_market_data():
    symbols = [
        "BTC/USDT", "ETH/USDT", "SOL/USDT", "BNB/USDT", "LINK/USDT",
        "NEAR/USDT", "AVAX/USDT", "ARB/USDT", "SUI/USDT", "PENDLE/USDT"
    ]
    coin_data = []

    for symbol in symbols:
        try:
            data = fetch_coin_data(symbol)
            realtime = fetch_realtime_price(symbol)
            coin_data.append({"symbol": symbol, "data": data, "realtime": realtime})
        except Exception as e:
            print(f"‚ùå L·ªói khi fetch {symbol}: {e}")

    context = "Ph√¢n t√≠ch k·ªπ thu·∫≠t t·ªïng th·ªÉ d·ª±a tr√™n BTC/USDT ho·∫∑c market cap... (placeholder)"

    return {
        "context": context,
        "coins": coin_data
    }

def build_signals():
    try:
        market_data = get_market_data()
        context = market_data["context"]
        coin_data = market_data["coins"]
        all_symbols = [coin["symbol"] for coin in coin_data]
        raw_signals = coin_data

        print("üìò B·ªëi c·∫£nh th·ªã tr∆∞·ªùng:")
        print(context)
        print("üìà D·ªØ li·ªáu c√°c coin:")
        for coin in coin_data:
            print(f"- {coin['symbol']}: {coin['data'][-1]} | Realtime: {coin['realtime']}")

        timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M")
        debug_filename = f"debug_input_{timestamp}.json"
        with open(debug_filename, "w") as f:
            json.dump({"context": context, "coins": coin_data}, f, indent=2)

        prompt = f'''
B·∫°n l√† m·ªôt chuy√™n gia giao d·ªãch crypto. H√£y ph√¢n t√≠ch v√† ch·ªçn ra c√°c t√≠n hi·ªáu m·∫°nh t·ª´ d·ªØ li·ªáu sau:

B·ªëi c·∫£nh th·ªã tr∆∞·ªùng chung:
{context}

D·ªØ li·ªáu c√°c ƒë·ªìng coin:
{coin_data}

Y√™u c·∫ßu:
- ∆Øu ti√™n c√°c t√≠n hi·ªáu c√≥ x√°c su·∫•t cao: breakout r√µ r√†ng (cho Long), breakdown m·∫°nh (cho Short), volume v∆∞·ª£t ƒë·ªânh, RSI qu√° mua/qu√° b√°n r√µ.
- Ngo√†i ra, ch·∫•p nh·∫≠n c√°c t√≠n hi·ªáu pullback (v·ªÅ MA, v√πng h·ªó tr·ª£/kh√°ng c·ª±) ho·∫∑c sideways range c√≥ bi·∫øn ƒë·ªông tƒÉng d·∫ßn n·∫øu c√≥ t√≠n hi·ªáu h·ªìi ph·ª•c ho·∫∑c ƒë·∫£o chi·ªÅu r√µ r√†ng.
- V·ªõi m·ªói t√≠n hi·ªáu, ƒë√°nh gi√° m·ª©c ƒë·ªô: "strong", "moderate", ho·∫∑c "weak" v√† ch·ªâ gi·ªØ t√≠n hi·ªáu "strong" ho·∫∑c "moderate".
- N·∫øu c√≥ t√≠n hi·ªáu Long v√† Short ƒë·ªìng th·ªùi tr√™n c√πng m·ªôt ƒë·ªìng coin, ch·ªâ gi·ªØ t√≠n hi·ªáu c√≥ x√°c su·∫•t cao h∆°n.
- T∆∞ v·∫•n ƒë√≤n b·∫©y (leverage) ph√π h·ª£p v·ªõi m·ª©c ƒë·ªô r·ªßi ro c·ªßa t√≠n hi·ªáu (v√≠ d·ª•: x3 cho t√≠n hi·ªáu c√≥ r·ªßi ro cao, x10 cho t√≠n hi·ªáu an to√†n v√† r√µ r√†ng).
- Entry 1 v√† Entry 2 n√™n n·∫±m quanh gi√° real-time (gi√° realtime ƒë√£ ƒë∆∞·ª£c cung c·∫•p cho t·ª´ng coin).
- Ch·ªâ ph√°t t·ªëi ƒëa 1 t√≠n hi·ªáu cho m·ªói ƒë·ªìng coin.
- N·∫øu kh√¥ng c√≥ t√≠n hi·ªáu m·∫°nh, lo·∫°i b·ªè coin ƒë√≥ kh·ªèi k·∫øt qu·∫£.
- Tr·∫£ v·ªÅ **ch·ªâ JSON thu·∫ßn t√∫y** theo ƒë·ªãnh d·∫°ng:
[
  {{
    "pair": "...",
    "direction": "Long" ho·∫∑c "Short",
    "entry_1": ..., 
    "entry_2": ..., 
    "stop_loss": ..., 
    "tp": [tp1, tp2, tp3, tp4, tp5],
    "risk_level": "...",
    "leverage": "...",
    "key_watch": "...",
    "assessment": "Vi·∫øt nh·∫≠n ƒë·ªãnh ng·∫Øn g·ªçn, ƒë√∫ng b·∫£n ch·∫•t t√≠n hi·ªáu k·ªπ thu·∫≠t, kh√¥ng ph√≥ng ƒë·∫°i",
    "strength": "strong" ho·∫∑c "moderate"
  }}
]

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, d√πng t·ª´ ng·ªØ t√†i ch√≠nh ‚Äì k·ªπ thu·∫≠t ph√π h·ª£p v·ªõi trader Vi·ªát. Kh√¥ng th√™m gi·∫£i th√≠ch ngo√†i JSON.
'''

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )

        result = response.choices[0].message.content.strip()

        json_start = result.find("[")
        json_end = result.rfind("]")
        if json_start == -1 or json_end == -1:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong GPT output.")
            return [], all_symbols, raw_signals

        result = result[json_start:json_end + 1]

        print("üì§ GPT Output:")
        print(result)

        if "null" in result.lower():
            return [], all_symbols, raw_signals

        try:
            parsed = json.loads(result)
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON decode error: {e}")
            print("üîç Raw GPT result:")
            print(result)
            return [], all_symbols, raw_signals

        required_keys = {"pair", "direction", "entry_1", "entry_2", "stop_loss", "tp", "risk_level", "leverage", "key_watch", "assessment", "strength"}
        valid_signals = []

        for s in parsed:
            if all(k in s for k in required_keys):
                valid_signals.append(s)
            else:
                print(f"‚ö†Ô∏è Thi·∫øu tr∆∞·ªùng trong t√≠n hi·ªáu: {s}")

        return valid_signals, all_symbols, raw_signals

    except Exception as e:
        print(f"‚ùå GPT error: {e}")
        return [], [], []
