import os
import openai
from datetime import datetime, UTC
from utils import parse_signal_response
from indicators import generate_take_profits, generate_stop_loss

# G·ª≠i t·ª´ng coin m·ªôt v·ªõi prompt c√≥ ƒë·ªãnh d·∫°ng t·ª´ PROMPT_TEMPLATE
async def get_gpt_signals(data_by_symbol):
    results = {}

    openai.api_key = os.getenv("OPENAI_API_KEY")

    async with openai.AsyncOpenAI() as client:
        for symbol, tf_data in data_by_symbol.items():
            try:
                summary_lines = []
                for tf in ["1H", "4H", "1D"]:
                    item = tf_data.get(tf, {})
                    if item:
                        summary_lines.append(
                            f"[{tf}] Trend: {item.get('trend')}, RSI: {item.get('rsi')}, MA20: {item.get('ma20')}, MA50: {item.get('ma50')}, Candle: {item.get('candle_signal')}, BB: ({item.get('bb_lower')}, {item.get('bb_upper')})"
                        )

                prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω giao d·ªãch crypto chuy√™n nghi·ªáp.
D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu k·ªπ thu·∫≠t c·ªßa {symbol} theo t·ª´ng khung th·ªùi gian:

{chr(10).join(summary_lines)}

H√£y ƒë√°nh gi√° xem c√≥ c∆° h·ªôi giao d·ªãch kh√¥ng d·ª±a tr√™n xu h∆∞·ªõng (Trend), l·ª±c n·∫øn, RSI, MA, Bollinger Bands.
N·∫øu c√≥, h√£y ƒë·ªÅ xu·∫•t k·∫ø ho·∫°ch giao d·ªãch chi ti·∫øt nh∆∞ sau, ∆∞u ti√™n ƒë√∫ng k·ªπ thu·∫≠t v√† th·ª±c t·∫ø th·ªã tr∆∞·ªùng:

- Symbol: {symbol} 
- Direction: Long ho·∫∑c Short
- Entry 1:
- Entry 2: (n·∫øu √°p d·ª•ng chi·∫øn l∆∞·ª£c scale-in ho·∫∑c DCA)
- Stop Loss: theo h·ªó tr·ª£/kh√°ng c·ª± ho·∫∑c BB/SwingLow-SwingHigh, tr√°nh ƒë·∫∑t qu√° g·∫ßn Entry
- TP1 ƒë·∫øn TP5: chia ƒë·ªÅu theo v√πng kh√°ng c·ª±/h·ªó tr·ª£ ho·∫∑c Fibonacci, t·ªëi thi·ªÉu 2 TP, t·ªëi ƒëa 5 TP (c√≥ th·ªÉ b·ªè TP4‚ÄìTP5 n·∫øu kh√¥ng c√≥ v√πng m·∫°nh)
- Risk Level: Low / Medium / High
- Leverage: 3x / 5x tu·ª≥ m·ª©c ƒë·ªô t√≠n hi·ªáu
- Strategy: dca ho·∫∑c scale-in (n√™u r√µ khi n√†o d√πng)
- Confidence: high / medium / low (t√πy theo ƒë·ªìng thu·∫≠n nhi·ªÅu khung th·ªùi gian v√† m√¥ h√¨nh n·∫øn)
- Key watch: m√¥ t·∫£ ƒëi·ªÅu ki·ªán c·∫ßn theo d√µi th√™m (v√≠ d·ª•: kh√°ng c·ª± g·∫ßn, RSI breakout, BB ch·∫°m bi√™n,...)
- Nh·∫≠n ƒë·ªãnh ng·∫Øn g·ªçn v·ªÅ t√≠n hi·ªáu n√†y b·∫±ng ti·∫øng Vi·ªát (g·ª£i √Ω h√†nh ƒë·ªông c·ª• th·ªÉ v√† r·ªßi ro n·∫øu c√≥).

Ch·ªâ tr·∫£ v·ªÅ d·ªØ li·ªáu JSON.
"""

                now = datetime.now(UTC)
                print(f"\nü§ñ GPT analyzing {symbol} at {now.isoformat()}...")

                response = await client.chat.completions.create(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": prompt.strip()}],
                    temperature=0.4,
                    max_tokens=1200,
                    timeout=30
                )

                reply = response.choices[0].message.content
                print(f"üì© GPT raw reply for {symbol}:", reply)
                parsed = parse_signal_response(reply)

                if not parsed:
                    print(f"‚ö†Ô∏è GPT tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá cho {symbol}.")
                    continue

                parsed["pair"] = symbol
                results[symbol] = parsed

            except Exception as e:
                print(f"‚ùå GPT failed for {symbol}: {e}")

    return results

BLOCKS = {
    "block1": ["BTC/USDT", "ETH/USDT", "SOL/USDT", "BNB/USDT"],
    "block2": ["LINK/USDT", "NEAR/USDT", "AVAX/USDT", "ARB/USDT"],
    "block3": ["SUI/USDT", "PENDLE/USDT"]
}
